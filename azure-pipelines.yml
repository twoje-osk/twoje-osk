trigger:
  batch: true
  branches:
    include:
      - main
  paths:
    include:
      - 'backend/*'
      - 'frontend/*'
      - 'shared/*'
      - '*.yml'
    exclude:
      - '.*' # skip every hidden file change in root dir
      - '**/.*' # skip every hidden file change in any dir below root dir
      - '!**/.eslintrc'
      - '!**/.prettierrc'
pr:
  branches:
    include:
      - main
  paths:
    include:
      - 'backend/*'
      - 'frontend/*'
      - 'shared/*'
      - '*.yml'
    exclude:
      - '.*' # skip every hidden file change in root dir
      - '**/.*' # skip every hidden file change in any dir below root dir
      - '!**/.eslintrc'
      - '!**/.prettierrc'
pool:
  vmImage: ubuntu-latest

variables:
  - group: SECRETS_FRONTEND
  - name: CI
    value: true
  - name: YARN_CACHE_FOLDER
    value: $(Pipeline.Workspace)/.yarn
  - ${{ if in( variables['Build.SourceBranchName'], 'main' ) }}:
    - name: ENVIRONMENT_NAME
      value: prod
  - ${{ if notIn( variables['Build.SourceBranchName'], 'main' ) }}:
    - name: ENVIRONMENT_NAME
      value: dev


stages:
  - stage: init_ci
    # first stage can't be conditional therefore we create one if we want to have some approvals in the pipeline
    displayName: Init CI
    jobs:
      - job: init
        displayName: 'Init'
        steps:
          - checkout: none
          - bash: |
              echo "This is init stage, as first one can't be conditional. Important CI variables:"
              echo "Build reason is: '${BUILD_REASON}'"
              echo "Source branch is: '${BUILD_SOURCEBRANCH}'"
              echo "Current UTC time is '$(date -u +%k%M)'"
            displayName: 'Print variables'
  - stage: build
    displayName: Build Application
    condition: succeeded('init_ci')
    jobs:
      - job: agent_preparation
        displayName: Agent Preparation
        steps:
          - checkout: self
            persistCredentials: true
          - bash: |
              if [[ "$(Build.Reason)" != "PullRequest" ]]; then
                DIFFS=`git diff HEAD HEAD~1 --name-only -- 'frontend' 'backend' 'shared' | sed 's| |\\ |g' | sed 's|/.*||g' | sort | uniq`
              else
                DIFFS=`git diff HEAD origin/$(System.PullRequest.TargetBranch) --name-only -- 'frontend' 'backend' 'shared' | sed 's| |\\ |g' | sed 's|/.*||g' | sort | uniq`
              fi

              if ! [[ "${DIFFS[@]}" ]]; then
                echo "No changes found in frontend, backend or shared directories."
              fi

              if [[ $MANUAL_FE_TRIGGER == "true" || "${DIFFS[@]}" =~ "frontend" ]]; then
                echo "##vso[task.setvariable variable=FRONTEND_TRIGGER;isOutput=true;]true"
                REASON="FE"
              fi

              if [[ $MANUAL_BE_TRIGGER == "true" || ("${DIFFS[@]}" =~ "backend" && "$(Build.Reason)" != "PullRequest") ]]; then
                echo "##vso[task.setvariable variable=BACKEND_TRIGGER;isOutput=true;]true"
                REASON="BE"
              fi

              if [[ $MANUAL_FE_TRIGGER == "true" && $MANUAL_BE_TRIGGER == "true" || ("${DIFFS[@]}" =~ "shared" || ("${DIFFS[@]}" =~ "frontend" && "${DIFFS[@]}" =~ "backend" && "$(Build.Reason)" != "PullRequest")) ]]; then
                echo "##vso[task.setvariable variable=FRONTEND_TRIGGER;isOutput=true;]true"
                echo "##vso[task.setvariable variable=BACKEND_TRIGGER;isOutput=true;]true"
                REASON="FS"
              fi
              
              if [[ $REASON ]]; then
                echo "##vso[build.updatebuildnumber]$(Build.BuildNumber) - [$REASON]"
              fi
            displayName: "GIT diff check"
            name: git_check
          
          #The entire part can be on a single condition but would need to integrate templates
      - job: backend_build
        displayName: "Backend Build"
        dependsOn: agent_preparation
        condition: |
          or
          (
            and
            (
              eq(dependencies.agent_preparation.outputs['git_check.BACKEND_TRIGGER'], 'true'),
              eq(dependencies.agent_preparation.result, 'Succeeded'),
              startsWith(variables['Build.SourceBranch'], 'refs/heads/'),
              eq(variables['Build.SourceBranchName'], 'main'),
              not(eq(variables['MANUAL_BE_TRIGGER'], 'false'))
            ),
            eq(variables['MANUAL_BE_TRIGGER'], 'true')
          )
        steps:
          - task: Cache@2
            inputs:
              key: '"yarn" | "$(Agent.OS)" | yarn.lock'
              restoreKeys: |
                yarn | "$(Agent.OS)"
                yarn
              path: $(YARN_CACHE_FOLDER)
            displayName: Cache Yarn packages
          - bash: |
              yarn install --frozen-lockfile
            displayName: "yarm install --frozen-lockfile"
          - bash: |
              yarn run type-check
            displayName: "yarm run type-check"
          - bash: |
              yarn run lint
            displayName: "yarn run lint"
          - task: DockerInstaller@0
            inputs:
              dockerVersion: '17.09.0-ce'
          - bash: |
              docker build . -t twoje-osk -f docker/Dockerfile.backend
            displayName: Building Docker image
            condition: succeeded()
      - job: frontend_build
        displayName: "Frontend Build"
        dependsOn: agent_preparation
        condition: |
          or
          (
            and
            (
              eq(dependencies.agent_preparation.outputs['git_check.FRONTEND_TRIGGER'], 'true'),
              in(dependencies.agent_preparation.result, 'Succeeded', 'Skipped'),
              not(eq(variables['MANUAL_FE_TRIGGER'], 'false'))
            ),
            eq(variables['MANUAL_FE_TRIGGER'], 'true')
          )
        steps:
          - task: Cache@2
            inputs:
              key: '"yarn" | "$(Agent.OS)" | yarn.lock'
              restoreKeys: |
                yarn | "$(Agent.OS)"
                yarn
              path: $(YARN_CACHE_FOLDER)
            displayName: Cache Yarn packages
          - bash: |
              cd frontend && yarn install --frozen-lockfile
            displayName: "yarm install --frozen-lockfile"
          - bash: |
              cd frontend && yarn run lint
            displayName: "yarn run lint"
          - bash: |
              cd frontend && yarn build
            displayName: "yarn build"
          - task: AzureStaticWebApp@0
            inputs:
              app_location: 'frontend/site'
              output_location: ''
              skip_app_build: true
              azure_static_web_apps_api_token: '$(DEPLOYMENT_TOKEN_STATIC_WEB_APP)'
