trigger:
  batch: true
  branches:
    include:
      - main
  paths:
    include:
      - 'backend/*'
      - 'frontend/*'
      - 'shared/*'
      - '*.yml'
    exclude:
      - '.*' # skip every hidden file change in root dir
      - '**/.*' # skip every hidden file change in any dir below root dir
      - '!**/.eslintrc'
      - '!**/.prettierrc'
pr:
  paths:
    include:
      - 'backend/*'
      - 'frontend/*'
      - 'shared/*'
      - '*.yml'
    exclude:
      - '.*' # skip every hidden file change in root dir
      - '**/.*' # skip every hidden file change in any dir below root dir
      - '!**/.eslintrc'
      - '!**/.prettierrc'

pool:
  vmImage: ubuntu-latest

variables:
  # - group: SECRETS_KEYVAULT
  # - group: SECRETS_BACKEND
  - name: CI
    value: true
  - name: YARN_CACHE_FOLDER
    value: $(Pipeline.Workspace)/.yarn
  - name: ACR_NAME
    value: oskshrdacr
  - name: ACR_ADDRESS
    value: oskshrdacr.azurecr.io
  - name: DOCKER_REPO
    value: twoje-osk
  - name: DOCKER_REPO_ADMIN
    value: twoje-osk-admin
  - ${{ if in( variables['Build.SourceBranchName'], 'main' ) }}:
    - name: ENVIRONMENT_TYPE
      value: prod
  - ${{ if notIn( variables['Build.SourceBranchName'], 'main' ) }}:
    - name: ENVIRONMENT_TYPE
      value: dev

stages:
  - stage: type_check_lint
    displayName: Type Check & Lint
    jobs:
      - job: agent_preparation
        displayName: Agent Preparation
        steps:
          - checkout: self
            persistCredentials: true
            fetchDepth: 5
          - bash: |
              if [[ "$(Build.Reason)" != "PullRequest" ]]; then
                DIFFS=`git diff HEAD HEAD~ --name-only -- 'frontend' 'backend' 'shared' 'yarn.lock' 'docker/Dockerfile.backend'`
              else
                DIFFS=`git diff HEAD origin/$(System.PullRequest.TargetBranch) --name-only -- 'frontend' 'backend' 'shared' 'yarn.lock' 'docker/Dockerfile.backend'`
              fi
              if [[ -z "$DIFFS" ]]; then
                echo "No build triggering changes found."
                exit 0
              fi

              echo "##vso[task.setvariable variable=BUILD_IMAGE;isOutput=true]true"
            displayName: "Set Git Diff Variables"
            name: git_check

      - job: install_depencies
        dependsOn: agent_preparation
        displayName: "Install Dependencies, Type Check & Lint"
        steps:
          - task: Cache@2
            inputs:
              key: '"yarn" | "$(Agent.OS)" | yarn.lock'
              restoreKeys: |
                yarn | "$(Agent.OS)"
                yarn
              path: $(YARN_CACHE_FOLDER)
            displayName: Cache Yarn packages
          - script: yarn --immutable
            displayName: Install Dependencies
          - bash: |
              cd shared && yarn run build
            displayName: Build @osk/shared
          - bash: |
              yarn run type-check
            displayName: Type Check
          - bash: |
              yarn run lint --max-warnings 0
            displayName: Lint

      - job: install_and_build
        displayName: Install and Build Image
        dependsOn: agent_preparation
        condition: |
          or
          (
            and
            (
              eq(variables['ENVIRONMENT_TYPE'], 'prod'),
              eq(dependencies.agent_preparation.result, 'Succeeded'),
              eq(dependencies.agent_preparation.outputs['git_check.BUILD_IMAGE'], 'true')
            ),
            eq(variables['MANUAL_TRIGGER'], 'true')
          )
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: '$(ACR_NAME)'
              command: 'login'
            displayName: "Docker login to acr"
          - script: |
              docker pull $(ACR_ADDRESS)/$(DOCKER_REPO):latest
              docker pull $(ACR_ADDRESS)/$(DOCKER_REPO_ADMIN):latest
            displayName: Pull latest for layer caching
            continueOnError: true # for first build, no available cache
          - task: Docker@2
            name: docker_build
            inputs:
              containerRegistry: '$(ACR_NAME)'
              repository: '$(DOCKER_REPO)'
              command: 'build'
              Dockerfile: 'docker/Dockerfile.backend'
              buildContext: '$(System.DefaultWorkingDirectory)'
              arguments: '--cache-from=$(ACR_ADDRESS)/$(DOCKER_REPO):latest'
              tags: |
                latest
          - task: Docker@2
            name: docker_build_admin
            inputs:
              containerRegistry: '$(ACR_NAME)'
              repository: '$(DOCKER_REPO_ADMIN)'
              command: 'build'
              Dockerfile: 'docker/Dockerfile.admin'
              buildContext: '$(System.DefaultWorkingDirectory)'
              arguments: '--cache-from=$(ACR_ADDRESS)/$(DOCKER_REPO_ADMIN):latest'
              tags: |
                latest
            displayName: Build Docker image
          - task: Docker@2
            name: docker_push
            inputs:
              containerRegistry: '$(ACR_NAME)'
              repository: '$(DOCKER_REPO)'
              command: 'push'
              tags: |
                latest
            displayName: Push Twoje-OSK Docker image to ACR
          - task: Docker@2
            name: docker_push_admin
            inputs:
              containerRegistry: '$(ACR_NAME)'
              repository: '$(DOCKER_REPO_ADMIN)'
              command: 'push'
              tags: |
                latest
            displayName: Push Twoje-OSK Admin Docker image to ACR
