trigger:
  batch: true
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main
  drafts: false

pool:
  vmImage: ubuntu-latest

variables:
  - group: SECRETS_FRONTEND
  - name: CI
    value: true
  - name: YARN_CACHE_FOLDER
    value: $(Pipeline.Workspace)/.yarn
  - ${{ if in( variables['Build.SourceBranchName'], 'main' ) }}:
    - name: ENVIRONMENT_NAME
      value: prod
  - ${{ if notIn( variables['Build.SourceBranchName'], 'main' ) }}:
    - name: ENVIRONMENT_NAME
      value: dev

stages:
  - stage: type_check_lint
    displayName: Type Check & Lint
    jobs:
      - job: agent_preparation
        displayName: Agent Preparation
        steps:
          - checkout: self
            persistCredentials: true
          - bash: |
              DIFFS=`git diff HEAD HEAD~1 --name-only -- 'frontend' 'backend' 'shared' | sed 's| |\\ |g' | sed 's|/.*||g' | sort | uniq`

              if ! [[ "${DIFFS[@]}" ]]; then
                echo "No changes found in backend, frontend or shared directories."
                exit 0
              fi

              if [[ "${DIFFS[@]}" =~ "backend" || "${DIFFS[@]}" =~ "shared" || "${DIFFS[@]}" =~ "frontend" ]]; then
                echo "##vso[task.setvariable variable=RUN_BACKEND;isOutput=true]true"
              fi
            displayName: "Set Git Diff Variables"
            name: git_check

      - job: install_depencies
        dependsOn: agent_preparation
        displayName: Install Dependencies, Type Check & Lint
        steps:
          - task: Cache@2
            inputs:
              key: '"yarn" | "$(Agent.OS)" | yarn.lock'
              restoreKeys: |
                yarn | "$(Agent.OS)"
                yarn
              path: $(YARN_CACHE_FOLDER)
            displayName: Cache Yarn packages
          - script: yarn --immutable
            displayName: Install Dependencies
          - bash: |
              cd shared && yarn run build
            displayName: Build @osk/shared
          - bash: |
                yarn run type-check
            displayName: Type Check
          - bash: |
              yarn run lint
            displayName: Lint

      - job: install_and_build
        displayName: Install and Build Backend
        dependsOn: agent_preparation
        condition: |
          and (
            eq(variables['Build.SourceBranch'], 'refs/heads/main'),
            eq(dependencies.agent_preparation.outputs['git_check.RUN_BACKEND'], 'true'),
            eq(dependencies.agent_preparation.result, 'Succeeded')
          )
        steps:
          # To be removed after implementing real deployment
          - bash: echo "Deploying Backend..."

          # - task: Docker@2
          #   inputs:
          #     containerRegistry: 'oskshrdacr'
          #     repository: 'twoje-osk'
          #     command: 'buildAndPush'
          #     Dockerfile: 'docker/Dockerfile.backend'
          #     buildContext: '$(System.DefaultWorkingDirectory)'
          #   displayName: Build Docker & Push to ACR
          # - task: AzureRmWebAppDeployment@4
          #   inputs:
          #     ConnectionType: 'AzureRM'
          #     azureSubscription: 'Romeo_Student'
          #     appType: 'webAppContainer'
          #     WebAppName: 'twoje-osk'
          #     deployToSlotOrASE: true
          #     ResourceGroupName: 'osk-prod-back-rg'
          #     SlotName: 'production'
          #     DockerNamespace: 'oskshrdacr.azurecr.io'
          #     DockerRepository: 'twoje-osk'
          #   displayName: Deploy app
